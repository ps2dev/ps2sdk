libmtap - Playstation 2 multitap access library
------------------------------------------------

Copyright (c) 2004 Nicholas Van Veen <nickvv@xtra.co.nz>

Multitap Introduction Page updated by Based_Skid on 1/17/2019

Introduction
------------

libmtap is a simple library which allows you to poll controllers and memorycards connected
through a PS2 multitap. libmtap works alongside the standard pad library,
libpad. Steps for polling a controller or memorycard connected to a multitap are as
follows:

 1. Load required IRX files 
 2. Init the multitap library
 3. Init the pad library
 4. Open the multitap port
 5. Check if a multitap is connected to the opened port - if not, you may
    close the port (note that a port must be opened in order to determine
    if a multitap is connected).
 6. "Open" each controller with padPortOpen(port, slot); (if using multiple controllers)
 7. Use standard libpad functions such as padGetState, padRead to get the state
    of each controller connected to the multitap.

--------
If you are working with the Memory Cards connected to a multitap, make sure you include libmc in your project.
You will also need to call mcInit(MC_TYPE_XMC);
--------
You can optionally include the iomanX/fileXio IRX modules.

Ports & Slots
-------------

The pad library requires two parameters when using a controller - port, and slot.
Port relates to either of the two ports on the PS2. Slot relates to one of the
4 slots present on a multitap. The diagram below should give you a better idea
of this system.

This diagram is also the same for Memory Cards. 
However, you will need to load the freesio2, MCMAN, and MCSERV modules in addition to the multitap module.



				      _________[ Port 1, Slot 2 ]
                                     /    _____[ Port 1, Slot 3 ]
  |------------|                     |   /
  |            |                   |-------|
  |            |                   | C   D |
  |     PS2    |          |--------|       | <- multitap
  |            |          |        | A   B |
  |            |          |        |-------|
  |            |          |          |   \_____ [ Port 1, Slot 1 ]
  |ConsolePort2|]---------|          \__________[ Port 1, Slot 0 ]
  |            |
  |ConsolePort1|]---[ Port 0, Slot 0 ]
  |            |
  |------------|
==== Controller/Memcard Port & Slot Listing ====
 1A: PORT = 0,SLOT = 0
 1B: PORT = 0,SLOT = 1
 1C: PORT = 0,SLOT = 2
 1D: PORT = 0,SLOT = 3
 
 2A: PORT = 1,SLOT = 0
 2B: PORT = 1,SLOT = 1
 2C: PORT = 1,SLOT = 2
 2D: PORT = 1,SLOT = 3
================================================== 

****MTAP Port Info****
MTAP ports should not be confused with controller and memory card ports.
That means that MTAP port 2 is still Memory Card port 0 (Console port 1)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//MTAP Controller Ports
mtapPortOpen(0); >> MTAP PORT0 = Memory Card port 0 (Console port 1)
mtapPortOpen(1); >> MTAP PORT1 = Memory Card port 1 (Console port 2)
//MTAP Memory Card Ports
mtapPortOpen(2); >> MTAP PORT2 = Memory Card port 0 (Console port 1)
mtapPortOpen(3); >> MTAP PORT3 = Memory Card port 1 (Console port 2)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Example code
------------
According to the original multitap sample, it declares that you must use the 
board-specific extended modules in order to use the multitap.
The IRX modules included with ps2sdk can be used instead with the multitap.
Check the LoadModule function in this file and check the Makefile to see how 
IRX modules can be used in your project.
---

 1. Loading the required IRX files

	SifExecModuleBuffer(&iomanX, size_iomanX, 0, NULL, NULL); // Optional iomanX
	
	SifExecModuleBuffer(&fileXio, size_fileXio, 0, NULL, NULL); // Optional fileXio
	// Initialize fileXio after loading its module
	fileXioInit();

	SifExecModuleBuffer(&freesio2, size_freesio2, 0, NULL, NULL); // sio2man replacement
	SifExecModuleBuffer(&mtapman, size_mtapman, 0, NULL, &ret); // mtapman replacement
	SifExecModuleBuffer(&freepad, size_freepad, 0, NULL, NULL); // padman replacement
	SifExecModuleBuffer(&mcman, size_mcman, 0, NULL, NULL); // mcman replacement
	SifExecModuleBuffer(&mcserv, size_mcserv, 0, NULL, NULL); // mcserv replacement

 2. Initialize and open ports
    
    // Initialize LibMC
    mcInit(MC_TYPE_XMC);
    
    // Initialize libmtap
    mtapInit();

    // Initialize libpad
    padInit(0);

    // Open ports
    // MTAP Controller ports
    mtapPortOpen(0); // >> MTAP PORT0 = Controller port 0 (Console port 1)
    mtapPortOpen(1); // >> MTAP PORT1 = Controller port 1 (Console port 2)
    // MTAP Memory Card ports
    mtapPortOpen(2); // >> MTAP PORT2 = Memory Card port 0 (Console port 1)
    mtapPortOpen(3); // >> MTAP PORT3 = Memory Card port 1 (Console port 2)

 3. Check connections

void mtapDetect()
// Detects the connection status of multitap(s). Closes multitap port(s) if multitap(s) are not connected
{
    int mt;
    printf("Multitap status:\n");
    
    mtapPortOpen(0); // Checks MTAP port 0 (Controller port 0) for MTAP connection
    mt = mtapGetConnection(0);
    if(mt == 1)
    {
        printf("Controller port 0: Multitap detected! \n");
    }
    else
    {
        printf("Controller port 0: Multitap is not connected. \n");
        mtapPortClose(0); // Closes the multitap port if the multitap is not connected
    }
    
    mtapPortOpen(1); // Checks MTAP port 1 (Controller port 1) for MTAP connection
    mt = mtapGetConnection(1);
    if(mt == 1)
    {
        printf("Controller port 1: Multitap detected! \n");
    }
    else
    {
        printf("Controller port 1: Multitap is not connected. \n");
        mtapPortClose(1); // CCloses the multitap port if the multitap is not connected
    }
    
    mtapPortOpen(2); // Checks MTAP port 2 (Memory Card Port 1) For MTAP Connection
    mt = mtapGetConnection(2);
    if(mt == 1)
    {
        printf("Memory Card port 0: Multitap detected! \n");
    }
    else
    {
        printf("Memory Card port 0: Multitap is not connected. \n");
        mtapPortClose(2); // Closes the multitap port if the multitap is not connected
    }
    
    mtapPortOpen(3);
    mt = mtapGetConnection(3); // Checks MTAP port 3 (Memory Card port 2) for MTAP connection
    if(mt == 1)
    {
        printf("Memory Card port 1: Multitap detected! \n");
    }
    else
    {
        printf("Memory Card port 1: Multitap is not connected. \n");
        mtapPortClose(3); // Closes the multitap port if the multitap is not connected
    }
}

 4. Open the controllers

    padPortOpen(0, 0, padBuf1A);
    padPortOpen(0, 1, padBuf1B);
    padPortOpen(0, 2, padBuf1C);
    padPortOpen(0, 3, padBuf1D);

Extra information
-----------------

Opening mulitap ports 1 and 2 are only required for controller access.
--
libmc works with memory cards that are connected to the multitap!
 
There are examples below to demonstrate "Port,Slot" use.
See the memory card sample, located at ee/rpc/memorycard/samples/mc_example.c, 
for more information about working with memory cards.

The calls below are modified slightly from the example and are to show how the 
port and slot are passed to calls that expect them.
--
==
mcGetInfo(0, 0, &mc_Type, &mc_Free, &mc_Format); << This would target the 1A port on the multitap (port 0, slot 0)
mcGetInfo(0, 1, &mc_Type, &mc_Free, &mc_Format); << 1B port
mcGetInfo(0, 2, &mc_Type, &mc_Free, &mc_Format); << 1C port
mcGetInfo(0, 3, &mc_Type, &mc_Free, &mc_Format); << 1D port
mcGetInfo(1, 0, &mc_Type, &mc_Free, &mc_Format); << 2A port
mcGetInfo(1, 1, &mc_Type, &mc_Free, &mc_Format); << 2B port
mcGetInfo(1, 2, &mc_Type, &mc_Free, &mc_Format); << 2C port
mcGetInfo(1, 3, &mc_Type, &mc_Free, &mc_Format); << 2D port
==

